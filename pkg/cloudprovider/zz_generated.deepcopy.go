//go:build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package cloudprovider

import (
	"k8s.io/api/core/v1"
	"sigs.k8s.io/karpenter/pkg/scheduling"
)

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceType.
func (in *InstanceType) DeepCopy() *InstanceType {
	if in == nil {
		return nil
	}
	out := new(InstanceType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceTypeOverhead) DeepCopyInto(out *InstanceTypeOverhead) {
	*out = *in
	if in.KubeReserved != nil {
		in, out := &in.KubeReserved, &out.KubeReserved
		*out = make(v1.ResourceList, len(*in))
		for key, val := range *in {
			(*out)[key] = val.DeepCopy()
		}
	}
	if in.SystemReserved != nil {
		in, out := &in.SystemReserved, &out.SystemReserved
		*out = make(v1.ResourceList, len(*in))
		for key, val := range *in {
			(*out)[key] = val.DeepCopy()
		}
	}
	if in.EvictionThreshold != nil {
		in, out := &in.EvictionThreshold, &out.EvictionThreshold
		*out = make(v1.ResourceList, len(*in))
		for key, val := range *in {
			(*out)[key] = val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceTypeOverhead.
func (in *InstanceTypeOverhead) DeepCopy() *InstanceTypeOverhead {
	if in == nil {
		return nil
	}
	out := new(InstanceTypeOverhead)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Offering) DeepCopyInto(out *Offering) {
	*out = *in
	if in.Requirements != nil {
		in, out := &in.Requirements, &out.Requirements
		*out = make(scheduling.Requirements, len(*in))
		for key, val := range *in {
			var outVal *scheduling.Requirement
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(scheduling.Requirement)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Offering.
func (in *Offering) DeepCopy() *Offering {
	if in == nil {
		return nil
	}
	out := new(Offering)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in Offerings) DeepCopyInto(out *Offerings) {
	{
		in := &in
		*out = make(Offerings, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(Offering)
				(*in).DeepCopyInto(*out)
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Offerings.
func (in Offerings) DeepCopy() Offerings {
	if in == nil {
		return nil
	}
	out := new(Offerings)
	in.DeepCopyInto(out)
	return *out
}
